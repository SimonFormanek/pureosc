<?php

namespace Test\PureOSC;

use PureOSC\SslCrypto;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-04-22 at 21:30:26.
 */
class SslCryptoTest extends \PHPUnit_Framework_TestCase {

  public $customer_id = 1;
  public $plaintext_password = 'testshop';
  public $plaintext = 'text to encrypt šřčřžľ';
  public $default_password = 'testshop';



  /**
   * @var SslCrypto
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new SslCrypto;

// make a connection to the database... now
tep_db_connect() or die('Unable to connect to database server!');

    }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {

  }

  /**
   * @covers PureOSC\SslCrypto::encrypt
   * @covers PureOSC\SslCrypto::decrypt
   */
  public function testEncryptDecrypt() {
    $crypted = SslCrypto::encrypt($this->plaintext, $this->customer_id);
    $crypted_password = SslCrypto::encrypt_session_password($this->default_password);
    $this->assertEquals($this->plaintext, SslCrypto::decrypt($crypted, $crypted_password, $this->customer_id));
  }

  /**
   * @covers PureOSC\SslCrypto::encrypt_session_password
   * @covers PureOSC\SslCrypto::decrypt_session_password
   */
  public function testEncryptDecrypt_session_password() {
    
    $crypted_password = SslCrypto::encrypt_session_password($this->plaintext_password);
    $this->assertEquals($this->plaintext_password, SslCrypto::decrypt_session_password($crypted_password));
  }


  /**+-
   * @covers PureOSC\SslCrypto::change_passphrase_customer
   */
  public function testChange_passphrase_customer() {
    $password_current = 'testshop';
    $password_new = 'newsecretpassword';
    $res = SslCrypto::change_passphrase_customer($password_current, $password_new, $this->customer_id);
    $this->assertTrue($res);
    $this->setExpectedException('\Exception');
    
    $password_current = 'badpassword';
    $password_new = 'newsecretpassword';
    $res = SslCrypto::change_passphrase_customer($password_current, $password_new, $this->customer_id);
    $this->assertFalse($res);
 
  }

  /**
   * @covers PureOSC\SslCrypto::generate_customer_keys
   * @todo   Implement testGenerate_customer_keys().
   */
  public function testGenerate_customer_keys() {
    $customer_id =5; //new customer
    SslCrypto::generate_customer_keys($this->default_password, $customer_id);
    $crypted = SslCrypto::encrypt($this->plaintext, $customer_id);

    $crypted_password = SslCrypto::encrypt_session_password($this->default_password);
    $this->assertEquals($this->plaintext, SslCrypto::decrypt($crypted, $crypted_password, $customer_id));

    
    
  }

}
